import pandas as pd
import os
from itertools import product
from itertools import chain
from dataclasses import dataclass

configfile: "config.json"

MANIFEST = config["asm_manifest"]
RAW_DIR = config['raw_dir']
VALIDATED_DIR = config['validated_dir']
REFERENCE = config['reference']

@dataclass
class Child:
	father: str
	mother: str

manifest_df = pd.read_csv(MANIFEST, sep="\t", low_memory=False, header=0, dtype=str, keep_default_na=False)
families = list(set(manifest_df.family))
sample_dict = {}
child_dict = {}

for idx, row in manifest_df.iterrows():
	sm = row["sample"]; fm = row["family"]
	sm_id = f"{fm}_{sm}"
	if(fm not in sample_dict):
		sample_dict[fm] = []
	sample_dict[fm].append(sm)
	if row["father"] and row["mother"]:
		child_dict[sm_id] = Child(row["father"], row["mother"])

children = child_dict.keys()
samples = set(chain(*sample_dict.values()))

excluded_children = []
for child in children:
	file_name = f'{VALIDATED_DIR}/{child}.haplotypes.tsv'
	if not os.path.isfile(file_name):
		excluded_children.append(child)

children = children - excluded_children

def filter_children(*args, **kwargs):
	for wc_comb in product(*args, **kwargs):
		sm_id = "_".join(x[1] for x in wc_comb[0:2])
		if sm_id in children:
			yield(wc_comb)

def get_trio(wildcards):
	child = '_'.join([wildcards.family, wildcards.sample])
	father = child_dict[child].father
	mother = child_dict[child].mother

	return ','.join([father, mother, child])

def get_validated_mnms(wildcards):
	return f'{VALIDATED_DIR}/{wildcards.family}_{wildcards.sample}.haplotypes.tsv'

def get_raw_calls(wildcards):
	return f'{RAW_DIR}/{wildcards.family}_{wildcards.sample}.snvs_with_neigbors.tsv'

def get_paf(wildcards):
	if wildcards.relationship  == 'father':
		sample = child_dict[child].father.split('_')[1]
	elif wildcards.relationship  == 'mother':
		sample = child_dict[child].mother.split('_')[1]
	else:
		sample =  wildcards.sample

	return manifest_df.loc[(manifest_df['family'] == wildcards.family) & (manifest_df['sample'] == sample)][f'h{wildcards.haplotype}_paf'].values[0]

def get_child_paf(wildcards):
	return manifest_df.loc[(manifest_df['family'] == wildcards.family) & (manifest_df['sample'] == wildcards.sample)][
		f'h{wildcards.haplotype}_paf'].values[0]

def get_fasta(wildcards):
	if wildcards.relationship  == 'father':
		sample = child_dict[child].father.split('_')[1]
	elif wildcards.relationship  == 'mother':
		sample = child_dict[child].mother.split('_')[1]
	else:
		sample =  wildcards.sample

	return manifest_df.loc[(manifest_df['family'] == wildcards.family) & (manifest_df['sample'] == sample)][f'h{wildcards.haplotype}_fasta'].values[0]


def aggregate_input(wildcards):
    checkpoint_output = checkpoints.combine_fastas.get(**wildcards).output[0]
    return expand("recoded_msa/{family}_{sample}/{i}.msa.recoded.fasta",
			family = wildcards.family,
			sample = wildcards.sample,
			i = glob_wildcards(os.path.join(checkpoint_output, "{i}.fasta")).i)

def get_mem_mb(wildcards, attempt):
    return attempt * 12


haplotypes = ['1', '2']
relationships = ['father', 'mother', 'child']

wildcard_constraints:
    sample="|".join(samples),
    family="|".join(families),
	relationship = '|'.join(relationships),
	haplotypes = '|'.join(haplotypes)

localrules: all

rule all:
	input:
		expand("mnm_calls/{family}_{sample}.mnms.bed", filter_children, family = families, sample = samples),
		expand("sequence_files/{family}_{sample}_{relationship}_h{haplotype}.fasta", filter_children, family = families, sample = samples, relationship = relationships, haplotype = haplotypes),
		expand("validated_mnms/{family}_{sample}.tsv", filter_children, family = families, sample = samples)

rule define_mnm_regions:
	input:
		validated_mnms = get_validated_mnms,
		raw_calls = get_raw_calls
	output:
		mnm_bed = "mnm_calls/{family}_{sample}.mnms.bed",
		mnm_list = "mnm_calls/{family}_{sample}.mnms.txt"
	log:
		"log/define_mnm_regions_{family}_{sample}.log"
	resources:
		mem = 2,
		hrs = 2
	conda:
		"envs/env.yaml"
	script:
		"scripts/define_mnm_regions.py"

rule get_sequence_coordinates:
	input:
		mnm_bed = "mnm_calls/{family}_{sample}.mnms.bed",
		paf = get_paf
	output:
		assembly_coordinates = "asm_info/{family}_{sample}_{relationship}_h{haplotype}.bed",
		strandedness = "asm_info/{family}_{sample}_{relationship}_h{haplotype}.strands.tsv",
		rustybam = temp("{family}_{sample}_{relationship}_h{haplotype}.rustybam.output")
	log:
		"log/get_coordinates_{family}_{sample}_{relationship}_h{haplotype}.log"
	resources:
		mem = 12,
		hrs = 2
	shell: """
		source /etc/profile.d/modules.sh
		module load rustybam/0.1.33

		rustybam liftover --bed {input.mnm_bed} {input.paf} > {output.rustybam}
		awk '{{print $1, $3, $4, substr($13,6,length($1))}}' {output.rustybam} | sed 's/ /\t/g'  > {output.assembly_coordinates}
		awk '{{print $1":"$3"-"$4, $5}}' {output.rustybam} | sed 's/ /\t/g' > {output.strandedness}

	"""

rule get_sequence:
	input:
		assembly_coordinates =  "asm_info/{family}_{sample}_{relationship}_h{haplotype}.bed",
		fasta = get_fasta
	output:
		sequences = "sequence_files/{family}_{sample}_{relationship}_h{haplotype}.fasta",
	log:
		"log/get_sequence_{family}_{sample}_{relationship}_h{haplotype}.log"
	resources:
		mem = 4,
		hrs = 4
	shell: """
		source /etc/profile.d/modules.sh
		module load modules-eichler/prod

		bedtools getfasta -name -fi {input.fasta} -bed {input.assembly_coordinates} > {output.sequences}

	"""

checkpoint combine_fastas:
	input:
		validated_mnms = get_validated_mnms,
		strandedness= expand("asm_info/{{family}}_{{sample}}_{relationship}_h{haplotype}.strands.tsv", relationship = relationships, haplotype = haplotypes)
	output:
		fasta_dir = directory("family_fasta/{family}_{sample}/")
	params:
		child = "{family}_{sample}"
	log:
		"log/combine_fastas_{family}_{sample}.log"
	resources:
		mem = 2,
		hrs = 2
	conda:
		"envs/env.yaml"
	script:
		"scripts/combine_fasta_files.py"

rule add_reference_sequence:
	input:
		mnm_bed = "mnm_calls/{family}_{sample}.mnms.bed",
		fasta = "family_fasta/{family}_{sample}/{mnm_id}.fasta"
	output:
		individual_bed = temp("{family}_{sample}.{mnm_id}.bed"),
		full_fasta = "full_fasta/{family}_{sample}/{mnm_id}.fasta"
	params:
		reference = REFERENCE
	log:
		"log/add_reference_{family}_{sample}_{mnm_id}.log"
	resources:
		mem = get_mem_mb,
		hrs = 12
	shell: """
		source /etc/profile.d/modules.sh
		module load modules-eichler/prod
		
		grep {wildcards.mnm_id} {input.mnm_bed} > {output.individual_bed}

		cp {input.fasta} {output.full_fasta}

		bedtools getfasta -name -fi {params.reference} -bed {output.individual_bed}  >> {output.full_fasta}

	"""

rule align:
	input:
		fasta = "full_fasta/{family}_{sample}/{mnm_id}.fasta"
	output:
		msa = "msa/{family}_{sample}/{mnm_id}.msa.fasta"
	log:
		"log/msa_{family}_{sample}_{mnm_id}.log"
	resources:
		mem = get_mem_mb,
		hrs = 12
	shell: """
		source /etc/profile.d/modules.sh
		module load mafft/7.525 

		mafft --globalpair --maxiterate 1000 {input.fasta} > {output.msa} 

	"""

rule recode_mismatches:
	input:
		msa = "msa/{family}_{sample}/{mnm_id}.msa.fasta"
	output:
		recoded_msa = "recoded_msa/{family}_{sample}/{mnm_id}.msa.recoded.fasta"
	log:
		"log/recode_{family}_{sample}_{mnm_id}.log"
	resources:
		mem = 2,
		hrs = 2
	shell: """
		source /etc/profile.d/modules.sh
		module load goalign/0.3.7

		goalign diff -i {input.msa} -o {output.recoded_msa}
	"""

rule validate_mnms:
	input:
		fasta_files = aggregate_input,
		bed = "mnm_calls/{family}_{sample}.mnms.bed"
	output:
		mnm_list = "validated_mnms/{family}_{sample}.tsv"
	params:
		child = "{family}_{sample}"
	log:
		"log/validate_{family}_{sample}.log"
	resources:
		mem = 2,
		hrs = 2
	conda:
		"envs/env.yaml"
	script:
		"scripts/count_mnms.py"

# rule lift_to_t2t:
# 	input:
# 		bed = "validated_mnms/{family}_{sample}_h{haplotype}.bed",
# 		paf = get_child_paf
# 	output:
# 		t2t_paf = "validated_mnms/{family}_{sample}_h{haplotype}.paf"
# 	log:
# 		"log/lift_to_t2t_{family}_{sample}_h{haplotype}.log"
# 	resources:
# 		mem = 12,
# 		hrs = 2
# 	shell: """
# 		source /etc/profile.d/modules.sh
# 		module load rustybam/0.1.24
#
# 		rustybam liftover --qbed --bed {input.bed} {input.paf} > {output.t2t_paf}
# 	"""

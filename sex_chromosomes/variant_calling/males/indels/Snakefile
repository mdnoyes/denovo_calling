import pandas as pd
import numpy as np
from itertools import product
from itertools import chain
from dataclasses import dataclass

configfile: "config.json"

REF = config["ref"]
BAM_MANIFEST = config["bam_manifest"]
HIFI_SOURCES = config["hifi_sources"]

platforms = ['hifi', 'ont', 'illumina']

@dataclass
class Child:
	father: str
	mother: str

manifest_df = pd.read_csv(BAM_MANIFEST, sep="\t", low_memory=False, header=0, dtype=str, keep_default_na=False)
families = list(set(manifest_df.family))
sample_dict = {}
child_dict = {}

for idx, row in manifest_df.iterrows():
	sm = row["sample"]; fm = row["family"]
	sm_id = f"{fm}_{sm}"
	if(fm not in sample_dict):
		sample_dict[fm] = []
	sample_dict[fm].append(sm)
	if row["father"] and row["mother"]:
		if row["sex"] == "M":
			child_dict[sm_id] = Child(row['father'], row['mother'])

children = child_dict.keys()
samples = set(chain(*sample_dict.values()))

def filter_children(*args, **kwargs):
	for wc_comb in product(*args, **kwargs):
		sm_id = "_".join(x[1] for x in wc_comb[0:2])
		if sm_id in children:
			yield(wc_comb)

def get_trio(wildcards):
	child = '_'.join([wildcards.family, wildcards.sample])
	father = child_dict[child].father
	mother = child_dict[child].mother

	return ','.join([father, mother, child])

def get_mapq(wildcards):
	if wildcards.platform == 'illumina':
		return 0
	else:
		return 59


localrules: all

rule all:
	input:
		expand("indel_calls/{family}_{sample}_y_no_par_indels.tsv", filter_children, family = families, sample = samples),
		expand("read_data/y_no_par/{family}_{sample}_{platform}_indel_read_summary.tsv", filter_children, family = families, sample = samples, platform = platforms),
		expand("validated_calls/y_no_par/{family}_{sample}_indel_validation.tsv", filter_children, family = families, sample = samples),
		expand("indel_calls/{family}_{sample}_chrX_indels.tsv", filter_children, family = families, sample = samples),
		expand("read_data/chrX/{family}_{sample}_{platform}_indel_read_summary.tsv", filter_children, family = families, sample = samples, platform = platforms),
		expand("validated_calls/chrX/{family}_{sample}_indel_validation.tsv", filter_children, family = families, sample = samples)

rule get_Y_indels:
	input:
		vcf = "../snvs/raw_calls/{family}_{sample}_y_no_par_indels.tsv"
	output:
		indel_calls = "indel_calls/{family}_{sample}_y_no_par_indels.tsv"
	log:
		"log/make_Y_no_PAR_vcf_{family}_{sample}.log"
	resources:
		mem = 2,
		hrs = 4
	conda:
		"envs/env.yaml"
	script:
		"scripts/get_indel_calls.py"

rule get_indel_read_depth:
	input:
		indels = "indel_calls/{family}_{sample}_y_no_par_indels.tsv"
	output:
		read_summary = "read_data/y_no_par/{family}_{sample}_{platform}_indel_read_summary.tsv"
	params:
		reference = REF,
		bam_manifest = BAM_MANIFEST,
		family = "{family}",
		platform = "{platform}",
		parent = lambda wildcards: child_dict[f"{wildcards.family}_{wildcards.sample}"].father,
		sample = "{sample}",
		hifi_sources = HIFI_SOURCES
	log:
		"log/read_data_{family}_{sample}_{platform}_indel_depth.log"
	resources:
		mem = 12,
		hrs = 24
	conda:
		"envs/env.yaml"
	script:
		"scripts/check_indel_read_data.py"

rule filter_indels:
	input:
		read_summary = expand("read_data/y_no_par/{{family}}_{{sample}}_{platform}_indel_read_summary.tsv", platform = platforms),
		manifest = BAM_MANIFEST
	output:
		validated_indels = "validated_calls/y_no_par/{family}_{sample}_indel_validation.tsv"
	params:
		father = lambda wildcards: child_dict[f"{wildcards.family}_{wildcards.sample}"].father,
		sample = "{family}_{sample}"
	log:
		"log/read_data_{family}_{sample}_indel_validation.log"
	resources:
		mem = 24,
		hrs = 4
	conda:
		"envs/env.yaml"
	script:
		"scripts/combine_indel_validations.py"

rule get_X_indels:
	input:
		vcf = "../snvs/raw_calls/{family}_{sample}_chrX_indels.tsv"
	output:
		indel_calls = "indel_calls/{family}_{sample}_chrX_indels.tsv"
	log:
		"log/make_Y_no_PAR_vcf_{family}_{sample}.log"
	resources:
		mem = 2,
		hrs = 4
	conda:
		"envs/env.yaml"
	script:
		"scripts/get_indel_calls.py"

rule get_X_indel_read_depth:
	input:
		indels = "indel_calls/{family}_{sample}_chrX_indels.tsv"
	output:
		read_summary = "read_data/chrX/{family}_{sample}_{platform}_indel_read_summary.tsv"
	params:
		reference = REF,
		bam_manifest = BAM_MANIFEST,
		family = "{family}",
		platform = "{platform}",
		sample = "{sample}",
		parent = lambda wildcards: child_dict[f"{wildcards.family}_{wildcards.sample}"].mother,
		hifi_sources = HIFI_SOURCES
	log:
		"log/read_data_{family}_{sample}_{platform}_indel_depth.log"
	resources:
		mem = 12,
		hrs = 24
	conda:
		"envs/env.yaml"
	script:
		"scripts/check_indel_read_data.py"

rule filter_chrX_indels:
	input:
		read_summary = expand("read_data/chrX/{{family}}_{{sample}}_{platform}_indel_read_summary.tsv", platform = platforms),
		manifest = BAM_MANIFEST
	output:
		validated_indels = "validated_calls/chrX/{family}_{sample}_indel_validation.tsv"
	params:
		mother = lambda wildcards: child_dict[f"{wildcards.family}_{wildcards.sample}"].mother,
		sample = "{family}_{sample}"
	log:
		"log/read_data_{family}_{sample}_indel_validation.log"
	resources:
		mem = 24,
		hrs = 4
	conda:
		"envs/env.yaml"
	script:
		"scripts/combine_chrX_validations.py"
